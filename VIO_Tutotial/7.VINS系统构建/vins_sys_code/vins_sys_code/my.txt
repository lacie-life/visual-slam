
// #include <unistd.h>
// #include <stdio.h>
// #include <stdlib.h>
// #include <string.h>
// #include <iostream> //  https://www.cnblogs.com/lsgxeva/p/7696410.html:说明：是I/O流控制头文件,就像C里面的格式化输出一样
// #include <thread>
// #include <iomanip>

// #include <cv.h>
// #include <opencv2/opencv.hpp>
// #include <highgui.h>
// #include <eigen3/Eigen/Dense>
// #include "System.h"

// using namespace std;
// using namespace cv;
// using namespace Eigen;

// const int nDelayTimes = 2;

// string sData_path = "/home/vslam/VIO_Tutorial/7.VINS系统搭建/vio_data_simulation-master/bin/";
// string sConfig_path = "../config/";

// std::shared_ptr<System> pSystem;
// double fx = 4.616e+02;
// double fy = 4.603e+02;
// double cx = 3.630e+02;
// double cy = 2.481e+02;

// void PubImuData()
// {
// 	string sImu_data_file = sData_path + "imu_pose.txt";
// 	cout << "1 PubImuData start sImu_data_filea: " << sImu_data_file << endl;
// 	ifstream fsImu;
// 	fsImu.open(sImu_data_file.c_str());
// 	if (!fsImu.is_open())
// 	{
// 		cerr << "Failed to open imu file! " << sImu_data_file << endl;
// 		return;
// 	}

// 	std::string sImu_line;
// 	double dStampNSec = 0.0;
// 	Vector3d vAcc;
// 	Vector3d vGyr;
// 	while (std::getline(fsImu, sImu_line) && !sImu_line.empty()) // read imu data
// 	{
// 		std::istringstream ssImuData(sImu_line);
// 		ssImuData >> dStampNSec >> vGyr.x() >> vGyr.y() >> vGyr.z() >> vAcc.x() >> vAcc.y() >> vAcc.z();
// 		// cout << "Imu t: " << fixed << dStampNSec << " gyr: " << vGyr.transpose() << " acc: " << vAcc.transpose() << endl;
// 		pSystem->PubImuData(dStampNSec, vGyr, vAcc);
// 		usleep(5000 * nDelayTimes);
// 	}
// 	fsImu.close();
// }

// void PubImageData()
// {
// 	string sImage_file = sData_path + "/keyframe/all_points_";

// 	cout << "1 PubImageData start sImage_file: " << sImage_file << endl;

// 	ifstream fsImage;
// 	std::string sImage_line;
// 	double dStampNSec;
// 	string sImgFileName;
// 	for (int i = 0; i < 600; i++)
// 	{
// 		string str = sImage_file + to_string(i) + ".txt";
// 		cout<<str<<endl;
// 		fsImage.open(str.c_str());
// 		if (!fsImage.is_open())
// 		{
// 			cerr << "Failed to open image file! " << sImage_file << endl;
// 			return;
// 		}

// 		// cv::namedWindow("SOURCE IMAGE", CV_WINDOW_AUTOSIZE);
// 		Mat img(480, 752, CV_8UC1, Scalar(0));
// 		double _u, _v;
// 		dStampNSec = (i+1) * 0.033;

// 		while (std::getline(fsImage, sImage_line) && !sImage_line.empty())
// 		{
// 			std::istringstream ssImuData(sImage_line);
// 			ssImuData >> _u >> _v;

// 			int u = cvRound(_u * fx + cx);
// 			int v = cvRound(_v * fy + cy);
// 			cout << "Image t : " << fixed << dStampNSec << " Name: " << sImgFileName << endl;

// 			img.at<uchar>(v, u) = 255;
// 			// cout << "Image t : " << fixed << dStampNSec << " Name: " << sImgFileName << endl;
// 		}

// 		pSystem->PubImageData(dStampNSec, img);
// 		cv::imshow("SOURCE IMAGE", img);
// 		// cv::waitKey(0);
// 		usleep(50000 * nDelayTimes);
// 		fsImage.close();
// 	}
// }

// int main(int argc, char **argv)
// {
// 	pSystem.reset(new System(sConfig_path));

// 	std::thread thd_BackEnd(&System::ProcessBackEnd, pSystem);

// 	// sleep(5);
// 	std::thread thd_PubImuData(PubImuData);

// 	std::thread thd_PubImageData(PubImageData);

// 	std::thread thd_Draw(&System::Draw, pSystem);

// 	thd_PubImuData.join();
// 	thd_PubImageData.join();

// 	// thd_BackEnd.join();
// 	// thd_Draw.join();

// 	cout << "main end... see you ..." << endl;
// 	return 0;
// }


